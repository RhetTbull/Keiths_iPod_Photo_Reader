#include "WorkingDialog.h"#define kMoveToFront (WindowPtr) -1L//******************************************************************************//Extern Globalsextern WindowPtr gThumbsWindow, gImageWindow;extern bool gQuit;extern WorkingDialog* gWorkingDialog;//******************************************************************************//Global Declarations//******************************************************************************//Function Prototypes	//	In this filevoid ToolBoxInit();void WindowInit();void MenuBarInit();void DoEvent(EventRecord &eventPtr);void DoDialogEvent(EventRecord& theEvent);void HandleOSEvent(EventRecord &eventPtr);void HandleMouseDown(EventRecord &eventPtr);void HandleMouseUp(EventRecord &eventPtr);void HandleKeyDown(char theChar, EventRecord eventPtr);void HandleKeyUp(char theChar, EventRecord eventPtr);void HandleMenuChoice(long menuChoice);void DoUpdate(EventRecord &eventPtr);void HandleAppleChoice(short item);void HandleFileChoice(short item);void HandleEditChoice(short item);void DrawGrowBox(WindowPtr window);	//	In other files		//main.cppvoid SetDimensions();void OpenFromPhotosThumbsFolder();void OpenFromITHMBfile();void SavePresentImage();void SaveAllImages();void RedrawThumbsWindow();void RedrawImageWindow();void ScrollThumbsUp();void ScrollThumbsDown();void HandleClickInThumbsWindow(Point where);#pragma mark -void ToolBoxInit(){	InitCursor();	//EnterMovies();}void WindowInit(){	gThumbsWindow = GetNewCWindow(128, NULL, kMoveToFront);	gImageWindow = GetNewCWindow(129, NULL, kMoveToFront);}void MenuBarInit(){	Handle menuBar;	MenuHandle menuHandle;		menuBar = GetNewMBar(128);	SetMenuBar(menuBar);		menuHandle = GetMenuHandle(128);	AppendResMenu(menuHandle, 'DRVR');		//Insert all hierarchical menus	//Check items true	//Disable items	//menuHandle = GetMenu(MENU_RES_ID);	//GetMenu is different from GetMenuHandle (this is necessary for hierarchical menus to be inserted)	//InsertMenu(menuHandle, -1);			//Inserts a hierarchical menu	//CheckMenuItem(menuHandle, 6, true);		//Marks a certain item true	//DisableMenuItem(menuHandle, 2);			//Greys out a certain item (disabled)		menuHandle = GetMenuHandle(129);	DisableMenuItem(menuHandle, 3);	DisableMenuItem(menuHandle, 4);		DrawMenuBar();}void DoEvent(EventRecord &eventPtr){	char theChar;	WindowPtr whichWindow;		FindWindow(eventPtr.where, &whichWindow);		if (IsDialogEvent(&eventPtr))	{		DoDialogEvent(eventPtr);		return;	}		if (gWorkingDialog && !gWorkingDialog->GetDialogStopStatus())	{		//Allow the user to drag the working dialog around		WindowPtr whichWindow;		short thePart;					thePart = FindWindow(eventPtr.where, &whichWindow);				if (thePart != inDrag)			return;	}		switch (eventPtr.what)	{		case mouseDown:			HandleMouseDown(eventPtr);			break;		case mouseUp:			HandleMouseUp(eventPtr);			break;		case keyDown:		case autoKey:			theChar = eventPtr.message & charCodeMask;			if ((eventPtr.modifiers & cmdKey) != 0)				HandleMenuChoice(MenuKey(theChar));			else HandleKeyDown(theChar, eventPtr);			break;		case keyUp:			theChar = eventPtr.message & charCodeMask;			HandleKeyUp(theChar, eventPtr);			break;		case updateEvt:			DoUpdate(eventPtr);			break;		case osEvt:			HandleOSEvent(eventPtr);			break;		case nullEvent:			break;	}}void DoDialogEvent(EventRecord& theEvent){	DialogPtr dialogEventPtr;	short itemHit;	short thePart;	char theChar;	short itemType;	Handle itemHandle;	Rect itemRect;		DialogSelect(&theEvent, &dialogEventPtr, &itemHit);		if (gWorkingDialog && dialogEventPtr == gWorkingDialog->GetDialog())	{		gWorkingDialog->HandleDialogEvent(theEvent, itemHit);	}}void HandleOSEvent(EventRecord &eventPtr){}void HandleMouseDown(EventRecord &eventPtr){	WindowPtr whichWindow;	short thePart;	Rect portRect;	Rect bounds;			thePart = FindWindow(eventPtr.where, &whichWindow);		SelectWindow(whichWindow);		thePart = FindWindow(eventPtr.where, &whichWindow);				switch (thePart)	{		case inMenuBar:			HandleMenuChoice(MenuSelect(eventPtr.where));			break;		case inSysWindow:			break;		case inDrag:			SetRect(&bounds, -32767, -32767, 32767, 32767);			DragWindow(whichWindow, eventPtr.where, &bounds);			break;		case inContent:			SelectWindow(whichWindow);			if (whichWindow == gThumbsWindow)				HandleClickInThumbsWindow(eventPtr.where);			break;		case inGrow:			SelectWindow(whichWindow);			break;		case inZoomIn:		case inZoomOut:			break;		case inGoAway:			HideWindow(whichWindow);			if (whichWindow == gImageWindow)			{				MenuHandle menuHandle = GetMenuHandle(129);				DisableMenuItem(menuHandle, 3);			}			break;	}}void HandleMouseUp(EventRecord &eventPtr){	WindowPtr whichWindow;	short thePart;	Rect portRect;	Rect bounds;			thePart = FindWindow(eventPtr.where, &whichWindow);				switch (thePart)	{		case inContent:			//if (whichWindow == gExtrusionMapWindow)			//	HandleExtrusionMapWindowUnclick(eventPtr.where);			break;	}}void HandleKeyDown(char theChar, EventRecord eventPtr){	switch (theChar)	{		case '[':			ScrollThumbsUp();			break;		case ']':			ScrollThumbsDown();			break;		case ' ':			RedrawThumbsWindow();			break;	}}void HandleKeyUp(char theChar, EventRecord eventPtr){	switch (theChar)	{	}}void HandleMenuChoice(long menuChoice){	short menu;	short item;		if (menuChoice != 0)	{		menu = HiWord(menuChoice);		item = LoWord(menuChoice);				switch(menu)		{			case 128:				HandleAppleChoice(item);				break;			case 129:				HandleFileChoice(item);				break;			case 130:				HandleEditChoice(item);				break;		}				HiliteMenu(0);	}}void HandleAppleChoice(short item){	MenuHandle appleMenu;	Str255 accName;	short accNumber;		switch(item)	{		case 1:			//DoAboutBox();			break;		default:			//appleMenu = GetMenuHandle(128);			//GetMenuItemText(appleMenu, item, accName);			//accNumber = OpenDeskAcc(accName);			break;	}}void HandleFileChoice(short item){	MenuHandle menuHandle = GetMenu(129);		switch (item)	{		case 1:			SetDimensions();			break;		case 2:			OpenFromPhotosThumbsFolder();			break;		case 3:			OpenFromITHMBfile();			break;		case 4:			SavePresentImage();			break;		case 5:			SaveAllImages();			break;		case 6:			gQuit = true;			break;	}}void HandleEditChoice(short item){	switch (item)	{	}}void DrawGrowBox(WindowPtr window){	SetPort(GetWindowPort(window));	Rect portRect;	GetPortBounds(GetWindowPort(window), &portRect);	Rect clipRect = portRect;	clipRect.left = clipRect.right - 15;	clipRect.top = clipRect.bottom - 15;	ClipRect(&clipRect);	DrawGrowIcon(window);	clipRect = portRect;	ClipRect(&clipRect);}void DoUpdate(EventRecord &eventPtr){	WindowPtr window;		window = (WindowPtr)eventPtr.message;	SetPort(GetWindowPort(window));	BeginUpdate(window);		Rect portRect;	GetPortBounds(GetWindowPort(window), &portRect);	ClipRect(&portRect);		if (window == gThumbsWindow)		RedrawThumbsWindow();	if (window == gImageWindow)		RedrawImageWindow();		EndUpdate(window);}